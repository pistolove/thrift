package com.thirft.service.comment;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Vote implements org.apache.thrift.TBase<Vote, Vote._Fields>, java.io.Serializable, Cloneable, Comparable<Vote> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Vote");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField XID_FIELD_DESC = new org.apache.thrift.protocol.TField("xid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CHOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("choice", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField IS_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("isExpire", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VoteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VoteTupleSchemeFactory());
  }

  public String _id; // required
  public long xid; // required
  public long pid; // required
  public int cid; // required
  public long uid; // required
  public String title; // required
  public String content; // required
  public Map<Integer,LikeInfo> items; // required
  public String show; // required
  public int choice; // required
  public long endtime; // required
  public boolean isExpire; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    XID((short)2, "xid"),
    PID((short)3, "pid"),
    CID((short)4, "cid"),
    UID((short)5, "uid"),
    TITLE((short)6, "title"),
    CONTENT((short)7, "content"),
    ITEMS((short)8, "items"),
    SHOW((short)19, "show"),
    CHOICE((short)10, "choice"),
    ENDTIME((short)11, "endtime"),
    IS_EXPIRE((short)12, "isExpire");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // XID
          return XID;
        case 3: // PID
          return PID;
        case 4: // CID
          return CID;
        case 5: // UID
          return UID;
        case 6: // TITLE
          return TITLE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // ITEMS
          return ITEMS;
        case 19: // SHOW
          return SHOW;
        case 10: // CHOICE
          return CHOICE;
        case 11: // ENDTIME
          return ENDTIME;
        case 12: // IS_EXPIRE
          return IS_EXPIRE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XID_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __CID_ISSET_ID = 2;
  private static final int __UID_ISSET_ID = 3;
  private static final int __CHOICE_ISSET_ID = 4;
  private static final int __ENDTIME_ISSET_ID = 5;
  private static final int __ISEXPIRE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XID, new org.apache.thrift.meta_data.FieldMetaData("xid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LikeInfo.class))));
    tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData("show", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOICE, new org.apache.thrift.meta_data.FieldMetaData("choice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("isExpire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Vote.class, metaDataMap);
  }

  public Vote() {
  }

  public Vote(
    String _id,
    long xid,
    long pid,
    int cid,
    long uid,
    String title,
    String content,
    Map<Integer,LikeInfo> items,
    String show,
    int choice,
    long endtime,
    boolean isExpire)
  {
    this();
    this._id = _id;
    this.xid = xid;
    setXidIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.cid = cid;
    setCidIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.title = title;
    this.content = content;
    this.items = items;
    this.show = show;
    this.choice = choice;
    setChoiceIsSet(true);
    this.endtime = endtime;
    setEndtimeIsSet(true);
    this.isExpire = isExpire;
    setIsExpireIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Vote(Vote other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    this.xid = other.xid;
    this.pid = other.pid;
    this.cid = other.cid;
    this.uid = other.uid;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetItems()) {
      Map<Integer,LikeInfo> __this__items = new HashMap<Integer,LikeInfo>(other.items.size());
      for (Map.Entry<Integer, LikeInfo> other_element : other.items.entrySet()) {

        Integer other_element_key = other_element.getKey();
        LikeInfo other_element_value = other_element.getValue();

        Integer __this__items_copy_key = other_element_key;

        LikeInfo __this__items_copy_value = new LikeInfo(other_element_value);

        __this__items.put(__this__items_copy_key, __this__items_copy_value);
      }
      this.items = __this__items;
    }
    if (other.isSetShow()) {
      this.show = other.show;
    }
    this.choice = other.choice;
    this.endtime = other.endtime;
    this.isExpire = other.isExpire;
  }

  public Vote deepCopy() {
    return new Vote(this);
  }

  @Override
  public void clear() {
    this._id = null;
    setXidIsSet(false);
    this.xid = 0;
    setPidIsSet(false);
    this.pid = 0;
    setCidIsSet(false);
    this.cid = 0;
    setUidIsSet(false);
    this.uid = 0;
    this.title = null;
    this.content = null;
    this.items = null;
    this.show = null;
    setChoiceIsSet(false);
    this.choice = 0;
    setEndtimeIsSet(false);
    this.endtime = 0;
    setIsExpireIsSet(false);
    this.isExpire = false;
  }

  public String get_id() {
    return this._id;
  }

  public Vote set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public long getXid() {
    return this.xid;
  }

  public Vote setXid(long xid) {
    this.xid = xid;
    setXidIsSet(true);
    return this;
  }

  public void unsetXid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XID_ISSET_ID);
  }

  /** Returns true if field xid is set (has been assigned a value) and false otherwise */
  public boolean isSetXid() {
    return EncodingUtils.testBit(__isset_bitfield, __XID_ISSET_ID);
  }

  public void setXidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XID_ISSET_ID, value);
  }

  public long getPid() {
    return this.pid;
  }

  public Vote setPid(long pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCid() {
    return this.cid;
  }

  public Vote setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public Vote setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Vote setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public Vote setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public void putToItems(int key, LikeInfo val) {
    if (this.items == null) {
      this.items = new HashMap<Integer,LikeInfo>();
    }
    this.items.put(key, val);
  }

  public Map<Integer,LikeInfo> getItems() {
    return this.items;
  }

  public Vote setItems(Map<Integer,LikeInfo> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public String getShow() {
    return this.show;
  }

  public Vote setShow(String show) {
    this.show = show;
    return this;
  }

  public void unsetShow() {
    this.show = null;
  }

  /** Returns true if field show is set (has been assigned a value) and false otherwise */
  public boolean isSetShow() {
    return this.show != null;
  }

  public void setShowIsSet(boolean value) {
    if (!value) {
      this.show = null;
    }
  }

  public int getChoice() {
    return this.choice;
  }

  public Vote setChoice(int choice) {
    this.choice = choice;
    setChoiceIsSet(true);
    return this;
  }

  public void unsetChoice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHOICE_ISSET_ID);
  }

  /** Returns true if field choice is set (has been assigned a value) and false otherwise */
  public boolean isSetChoice() {
    return EncodingUtils.testBit(__isset_bitfield, __CHOICE_ISSET_ID);
  }

  public void setChoiceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHOICE_ISSET_ID, value);
  }

  public long getEndtime() {
    return this.endtime;
  }

  public Vote setEndtime(long endtime) {
    this.endtime = endtime;
    setEndtimeIsSet(true);
    return this;
  }

  public void unsetEndtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public boolean isIsExpire() {
    return this.isExpire;
  }

  public Vote setIsExpire(boolean isExpire) {
    this.isExpire = isExpire;
    setIsExpireIsSet(true);
    return this;
  }

  public void unsetIsExpire() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEXPIRE_ISSET_ID);
  }

  /** Returns true if field isExpire is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExpire() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEXPIRE_ISSET_ID);
  }

  public void setIsExpireIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEXPIRE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case XID:
      if (value == null) {
        unsetXid();
      } else {
        setXid((Long)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((Map<Integer,LikeInfo>)value);
      }
      break;

    case SHOW:
      if (value == null) {
        unsetShow();
      } else {
        setShow((String)value);
      }
      break;

    case CHOICE:
      if (value == null) {
        unsetChoice();
      } else {
        setChoice((Integer)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((Long)value);
      }
      break;

    case IS_EXPIRE:
      if (value == null) {
        unsetIsExpire();
      } else {
        setIsExpire((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case XID:
      return Long.valueOf(getXid());

    case PID:
      return Long.valueOf(getPid());

    case CID:
      return Integer.valueOf(getCid());

    case UID:
      return Long.valueOf(getUid());

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case ITEMS:
      return getItems();

    case SHOW:
      return getShow();

    case CHOICE:
      return Integer.valueOf(getChoice());

    case ENDTIME:
      return Long.valueOf(getEndtime());

    case IS_EXPIRE:
      return Boolean.valueOf(isIsExpire());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case XID:
      return isSetXid();
    case PID:
      return isSetPid();
    case CID:
      return isSetCid();
    case UID:
      return isSetUid();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case ITEMS:
      return isSetItems();
    case SHOW:
      return isSetShow();
    case CHOICE:
      return isSetChoice();
    case ENDTIME:
      return isSetEndtime();
    case IS_EXPIRE:
      return isSetIsExpire();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Vote)
      return this.equals((Vote)that);
    return false;
  }

  public boolean equals(Vote that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_xid = true;
    boolean that_present_xid = true;
    if (this_present_xid || that_present_xid) {
      if (!(this_present_xid && that_present_xid))
        return false;
      if (this.xid != that.xid)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cid = true;
    boolean that_present_cid = true;
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_show = true && this.isSetShow();
    boolean that_present_show = true && that.isSetShow();
    if (this_present_show || that_present_show) {
      if (!(this_present_show && that_present_show))
        return false;
      if (!this.show.equals(that.show))
        return false;
    }

    boolean this_present_choice = true;
    boolean that_present_choice = true;
    if (this_present_choice || that_present_choice) {
      if (!(this_present_choice && that_present_choice))
        return false;
      if (this.choice != that.choice)
        return false;
    }

    boolean this_present_endtime = true;
    boolean that_present_endtime = true;
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (this.endtime != that.endtime)
        return false;
    }

    boolean this_present_isExpire = true;
    boolean that_present_isExpire = true;
    if (this_present_isExpire || that_present_isExpire) {
      if (!(this_present_isExpire && that_present_isExpire))
        return false;
      if (this.isExpire != that.isExpire)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Vote other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXid()).compareTo(other.isSetXid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xid, other.xid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow()).compareTo(other.isSetShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show, other.show);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoice()).compareTo(other.isSetChoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choice, other.choice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsExpire()).compareTo(other.isSetIsExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExpire, other.isExpire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Vote(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xid:");
    sb.append(this.xid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cid:");
    sb.append(this.cid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("show:");
    if (this.show == null) {
      sb.append("null");
    } else {
      sb.append(this.show);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choice:");
    sb.append(this.choice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    sb.append(this.endtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isExpire:");
    sb.append(this.isExpire);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VoteStandardSchemeFactory implements SchemeFactory {
    public VoteStandardScheme getScheme() {
      return new VoteStandardScheme();
    }
  }

  private static class VoteStandardScheme extends StandardScheme<Vote> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Vote struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xid = iprot.readI64();
              struct.setXidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pid = iprot.readI64();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.items = new HashMap<Integer,LikeInfo>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2;
                  LikeInfo _val3;
                  _key2 = iprot.readI32();
                  _val3 = new LikeInfo();
                  _val3.read(iprot);
                  struct.items.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.show = iprot.readString();
              struct.setShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.choice = iprot.readI32();
              struct.setChoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endtime = iprot.readI64();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExpire = iprot.readBool();
              struct.setIsExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Vote struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(XID_FIELD_DESC);
      oprot.writeI64(struct.xid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI64(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CID_FIELD_DESC);
      oprot.writeI32(struct.cid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
          for (Map.Entry<Integer, LikeInfo> _iter4 : struct.items.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHOICE_FIELD_DESC);
      oprot.writeI32(struct.choice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
      oprot.writeI64(struct.endtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EXPIRE_FIELD_DESC);
      oprot.writeBool(struct.isExpire);
      oprot.writeFieldEnd();
      if (struct.show != null) {
        oprot.writeFieldBegin(SHOW_FIELD_DESC);
        oprot.writeString(struct.show);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VoteTupleSchemeFactory implements SchemeFactory {
    public VoteTupleScheme getScheme() {
      return new VoteTupleScheme();
    }
  }

  private static class VoteTupleScheme extends TupleScheme<Vote> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Vote struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetXid()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetCid()) {
        optionals.set(3);
      }
      if (struct.isSetUid()) {
        optionals.set(4);
      }
      if (struct.isSetTitle()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetItems()) {
        optionals.set(7);
      }
      if (struct.isSetShow()) {
        optionals.set(8);
      }
      if (struct.isSetChoice()) {
        optionals.set(9);
      }
      if (struct.isSetEndtime()) {
        optionals.set(10);
      }
      if (struct.isSetIsExpire()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetXid()) {
        oprot.writeI64(struct.xid);
      }
      if (struct.isSetPid()) {
        oprot.writeI64(struct.pid);
      }
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (Map.Entry<Integer, LikeInfo> _iter5 : struct.items.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetShow()) {
        oprot.writeString(struct.show);
      }
      if (struct.isSetChoice()) {
        oprot.writeI32(struct.choice);
      }
      if (struct.isSetEndtime()) {
        oprot.writeI64(struct.endtime);
      }
      if (struct.isSetIsExpire()) {
        oprot.writeBool(struct.isExpire);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Vote struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xid = iprot.readI64();
        struct.setXidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI64();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new HashMap<Integer,LikeInfo>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            int _key8;
            LikeInfo _val9;
            _key8 = iprot.readI32();
            _val9 = new LikeInfo();
            _val9.read(iprot);
            struct.items.put(_key8, _val9);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.show = iprot.readString();
        struct.setShowIsSet(true);
      }
      if (incoming.get(9)) {
        struct.choice = iprot.readI32();
        struct.setChoiceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endtime = iprot.readI64();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isExpire = iprot.readBool();
        struct.setIsExpireIsSet(true);
      }
    }
  }

}

