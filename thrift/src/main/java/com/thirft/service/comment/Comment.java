package com.thirft.service.comment;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Comment implements org.apache.thrift.TBase<Comment, Comment._Fields>, java.io.Serializable, Cloneable, Comparable<Comment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Comment");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMMENTID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("vtime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ctime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPLYNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("replynum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("share", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("like", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField XID_FIELD_DESC = new org.apache.thrift.protocol.TField("xid", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField IS_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("isLike", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IS_VOTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isVoted", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SSOUID_FIELD_DESC = new org.apache.thrift.protocol.TField("ssouid", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField VOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("vote", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField CMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cmtType", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField IMG_PACK_FIELD_DESC = new org.apache.thrift.protocol.TField("imgPack", org.apache.thrift.protocol.TType.MAP, (short)26);
  private static final org.apache.thrift.protocol.TField HTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("htime", org.apache.thrift.protocol.TType.I64, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentTupleSchemeFactory());
  }

  public long _id; // required
  public String commentid; // required
  public String content; // required
  public String vtime; // required
  public String ctime; // required
  public String city; // required
  public long replynum; // required
  public String share; // required
  public String like; // required
  public long pid; // required
  public long xid; // required
  public int cid; // required
  public String title; // required
  public Map<String,String> replys; // required
  public CommentSource source; // required
  public CommentUser user; // required
  public String isLike; // required
  public String isVoted; // required
  public String flag; // required
  public String reply; // required
  public String uid; // required
  public String ssouid; // required
  public Vote vote; // required
  public String cmtType; // required
  public String img; // required
  public Map<String,String> imgPack; // required
  public long htime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    COMMENTID((short)2, "commentid"),
    CONTENT((short)3, "content"),
    VTIME((short)4, "vtime"),
    CTIME((short)5, "ctime"),
    CITY((short)6, "city"),
    REPLYNUM((short)7, "replynum"),
    SHARE((short)8, "share"),
    LIKE((short)9, "like"),
    PID((short)10, "pid"),
    XID((short)11, "xid"),
    CID((short)12, "cid"),
    TITLE((short)13, "title"),
    REPLYS((short)14, "replys"),
    SOURCE((short)15, "source"),
    USER((short)16, "user"),
    IS_LIKE((short)17, "isLike"),
    IS_VOTED((short)18, "isVoted"),
    FLAG((short)19, "flag"),
    REPLY((short)20, "reply"),
    UID((short)21, "uid"),
    SSOUID((short)22, "ssouid"),
    VOTE((short)23, "vote"),
    CMT_TYPE((short)24, "cmtType"),
    IMG((short)25, "img"),
    IMG_PACK((short)26, "imgPack"),
    HTIME((short)27, "htime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // COMMENTID
          return COMMENTID;
        case 3: // CONTENT
          return CONTENT;
        case 4: // VTIME
          return VTIME;
        case 5: // CTIME
          return CTIME;
        case 6: // CITY
          return CITY;
        case 7: // REPLYNUM
          return REPLYNUM;
        case 8: // SHARE
          return SHARE;
        case 9: // LIKE
          return LIKE;
        case 10: // PID
          return PID;
        case 11: // XID
          return XID;
        case 12: // CID
          return CID;
        case 13: // TITLE
          return TITLE;
        case 14: // REPLYS
          return REPLYS;
        case 15: // SOURCE
          return SOURCE;
        case 16: // USER
          return USER;
        case 17: // IS_LIKE
          return IS_LIKE;
        case 18: // IS_VOTED
          return IS_VOTED;
        case 19: // FLAG
          return FLAG;
        case 20: // REPLY
          return REPLY;
        case 21: // UID
          return UID;
        case 22: // SSOUID
          return SSOUID;
        case 23: // VOTE
          return VOTE;
        case 24: // CMT_TYPE
          return CMT_TYPE;
        case 25: // IMG
          return IMG;
        case 26: // IMG_PACK
          return IMG_PACK;
        case 27: // HTIME
          return HTIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___ID_ISSET_ID = 0;
  private static final int __REPLYNUM_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __XID_ISSET_ID = 3;
  private static final int __CID_ISSET_ID = 4;
  private static final int __HTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENTID, new org.apache.thrift.meta_data.FieldMetaData("commentid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VTIME, new org.apache.thrift.meta_data.FieldMetaData("vtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CTIME, new org.apache.thrift.meta_data.FieldMetaData("ctime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLYNUM, new org.apache.thrift.meta_data.FieldMetaData("replynum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHARE, new org.apache.thrift.meta_data.FieldMetaData("share", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIKE, new org.apache.thrift.meta_data.FieldMetaData("like", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.XID, new org.apache.thrift.meta_data.FieldMetaData("xid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentSource.class)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentUser.class)));
    tmpMap.put(_Fields.IS_LIKE, new org.apache.thrift.meta_data.FieldMetaData("isLike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VOTED, new org.apache.thrift.meta_data.FieldMetaData("isVoted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SSOUID, new org.apache.thrift.meta_data.FieldMetaData("ssouid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOTE, new org.apache.thrift.meta_data.FieldMetaData("vote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vote.class)));
    tmpMap.put(_Fields.CMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cmtType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_PACK, new org.apache.thrift.meta_data.FieldMetaData("imgPack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HTIME, new org.apache.thrift.meta_data.FieldMetaData("htime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Comment.class, metaDataMap);
  }

  public Comment() {
  }

  public Comment(
    long _id,
    String commentid,
    String content,
    String vtime,
    String ctime,
    String city,
    long replynum,
    String share,
    String like,
    long pid,
    long xid,
    int cid,
    String title,
    Map<String,String> replys,
    CommentSource source,
    CommentUser user,
    String isLike,
    String isVoted,
    String flag,
    String reply,
    String uid,
    String ssouid,
    Vote vote,
    String cmtType,
    String img,
    Map<String,String> imgPack,
    long htime)
  {
    this();
    this._id = _id;
    set_idIsSet(true);
    this.commentid = commentid;
    this.content = content;
    this.vtime = vtime;
    this.ctime = ctime;
    this.city = city;
    this.replynum = replynum;
    setReplynumIsSet(true);
    this.share = share;
    this.like = like;
    this.pid = pid;
    setPidIsSet(true);
    this.xid = xid;
    setXidIsSet(true);
    this.cid = cid;
    setCidIsSet(true);
    this.title = title;
    this.replys = replys;
    this.source = source;
    this.user = user;
    this.isLike = isLike;
    this.isVoted = isVoted;
    this.flag = flag;
    this.reply = reply;
    this.uid = uid;
    this.ssouid = ssouid;
    this.vote = vote;
    this.cmtType = cmtType;
    this.img = img;
    this.imgPack = imgPack;
    this.htime = htime;
    setHtimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Comment(Comment other) {
    __isset_bitfield = other.__isset_bitfield;
    this._id = other._id;
    if (other.isSetCommentid()) {
      this.commentid = other.commentid;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetVtime()) {
      this.vtime = other.vtime;
    }
    if (other.isSetCtime()) {
      this.ctime = other.ctime;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.replynum = other.replynum;
    if (other.isSetShare()) {
      this.share = other.share;
    }
    if (other.isSetLike()) {
      this.like = other.like;
    }
    this.pid = other.pid;
    this.xid = other.xid;
    this.cid = other.cid;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetReplys()) {
      Map<String,String> __this__replys = new HashMap<String,String>(other.replys);
      this.replys = __this__replys;
    }
    if (other.isSetSource()) {
      this.source = new CommentSource(other.source);
    }
    if (other.isSetUser()) {
      this.user = new CommentUser(other.user);
    }
    if (other.isSetIsLike()) {
      this.isLike = other.isLike;
    }
    if (other.isSetIsVoted()) {
      this.isVoted = other.isVoted;
    }
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetSsouid()) {
      this.ssouid = other.ssouid;
    }
    if (other.isSetVote()) {
      this.vote = new Vote(other.vote);
    }
    if (other.isSetCmtType()) {
      this.cmtType = other.cmtType;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    if (other.isSetImgPack()) {
      Map<String,String> __this__imgPack = new HashMap<String,String>(other.imgPack);
      this.imgPack = __this__imgPack;
    }
    this.htime = other.htime;
  }

  public Comment deepCopy() {
    return new Comment(this);
  }

  @Override
  public void clear() {
    set_idIsSet(false);
    this._id = 0;
    this.commentid = null;
    this.content = null;
    this.vtime = null;
    this.ctime = null;
    this.city = null;
    setReplynumIsSet(false);
    this.replynum = 0;
    this.share = null;
    this.like = null;
    setPidIsSet(false);
    this.pid = 0;
    setXidIsSet(false);
    this.xid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.title = null;
    this.replys = null;
    this.source = null;
    this.user = null;
    this.isLike = null;
    this.isVoted = null;
    this.flag = null;
    this.reply = null;
    this.uid = null;
    this.ssouid = null;
    this.vote = null;
    this.cmtType = null;
    this.img = null;
    this.imgPack = null;
    setHtimeIsSet(false);
    this.htime = 0;
  }

  public long get_id() {
    return this._id;
  }

  public Comment set_id(long _id) {
    this._id = _id;
    set_idIsSet(true);
    return this;
  }

  public void unset_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return EncodingUtils.testBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  public void set_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ID_ISSET_ID, value);
  }

  public String getCommentid() {
    return this.commentid;
  }

  public Comment setCommentid(String commentid) {
    this.commentid = commentid;
    return this;
  }

  public void unsetCommentid() {
    this.commentid = null;
  }

  /** Returns true if field commentid is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentid() {
    return this.commentid != null;
  }

  public void setCommentidIsSet(boolean value) {
    if (!value) {
      this.commentid = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public Comment setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getVtime() {
    return this.vtime;
  }

  public Comment setVtime(String vtime) {
    this.vtime = vtime;
    return this;
  }

  public void unsetVtime() {
    this.vtime = null;
  }

  /** Returns true if field vtime is set (has been assigned a value) and false otherwise */
  public boolean isSetVtime() {
    return this.vtime != null;
  }

  public void setVtimeIsSet(boolean value) {
    if (!value) {
      this.vtime = null;
    }
  }

  public String getCtime() {
    return this.ctime;
  }

  public Comment setCtime(String ctime) {
    this.ctime = ctime;
    return this;
  }

  public void unsetCtime() {
    this.ctime = null;
  }

  /** Returns true if field ctime is set (has been assigned a value) and false otherwise */
  public boolean isSetCtime() {
    return this.ctime != null;
  }

  public void setCtimeIsSet(boolean value) {
    if (!value) {
      this.ctime = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Comment setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public long getReplynum() {
    return this.replynum;
  }

  public Comment setReplynum(long replynum) {
    this.replynum = replynum;
    setReplynumIsSet(true);
    return this;
  }

  public void unsetReplynum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLYNUM_ISSET_ID);
  }

  /** Returns true if field replynum is set (has been assigned a value) and false otherwise */
  public boolean isSetReplynum() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLYNUM_ISSET_ID);
  }

  public void setReplynumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLYNUM_ISSET_ID, value);
  }

  public String getShare() {
    return this.share;
  }

  public Comment setShare(String share) {
    this.share = share;
    return this;
  }

  public void unsetShare() {
    this.share = null;
  }

  /** Returns true if field share is set (has been assigned a value) and false otherwise */
  public boolean isSetShare() {
    return this.share != null;
  }

  public void setShareIsSet(boolean value) {
    if (!value) {
      this.share = null;
    }
  }

  public String getLike() {
    return this.like;
  }

  public Comment setLike(String like) {
    this.like = like;
    return this;
  }

  public void unsetLike() {
    this.like = null;
  }

  /** Returns true if field like is set (has been assigned a value) and false otherwise */
  public boolean isSetLike() {
    return this.like != null;
  }

  public void setLikeIsSet(boolean value) {
    if (!value) {
      this.like = null;
    }
  }

  public long getPid() {
    return this.pid;
  }

  public Comment setPid(long pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public long getXid() {
    return this.xid;
  }

  public Comment setXid(long xid) {
    this.xid = xid;
    setXidIsSet(true);
    return this;
  }

  public void unsetXid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XID_ISSET_ID);
  }

  /** Returns true if field xid is set (has been assigned a value) and false otherwise */
  public boolean isSetXid() {
    return EncodingUtils.testBit(__isset_bitfield, __XID_ISSET_ID);
  }

  public void setXidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XID_ISSET_ID, value);
  }

  public int getCid() {
    return this.cid;
  }

  public Comment setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Comment setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public void putToReplys(String key, String val) {
    if (this.replys == null) {
      this.replys = new HashMap<String,String>();
    }
    this.replys.put(key, val);
  }

  public Map<String,String> getReplys() {
    return this.replys;
  }

  public Comment setReplys(Map<String,String> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public CommentSource getSource() {
    return this.source;
  }

  public Comment setSource(CommentSource source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public CommentUser getUser() {
    return this.user;
  }

  public Comment setUser(CommentUser user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getIsLike() {
    return this.isLike;
  }

  public Comment setIsLike(String isLike) {
    this.isLike = isLike;
    return this;
  }

  public void unsetIsLike() {
    this.isLike = null;
  }

  /** Returns true if field isLike is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLike() {
    return this.isLike != null;
  }

  public void setIsLikeIsSet(boolean value) {
    if (!value) {
      this.isLike = null;
    }
  }

  public String getIsVoted() {
    return this.isVoted;
  }

  public Comment setIsVoted(String isVoted) {
    this.isVoted = isVoted;
    return this;
  }

  public void unsetIsVoted() {
    this.isVoted = null;
  }

  /** Returns true if field isVoted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVoted() {
    return this.isVoted != null;
  }

  public void setIsVotedIsSet(boolean value) {
    if (!value) {
      this.isVoted = null;
    }
  }

  public String getFlag() {
    return this.flag;
  }

  public Comment setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  public String getReply() {
    return this.reply;
  }

  public Comment setReply(String reply) {
    this.reply = reply;
    return this;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public Comment setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getSsouid() {
    return this.ssouid;
  }

  public Comment setSsouid(String ssouid) {
    this.ssouid = ssouid;
    return this;
  }

  public void unsetSsouid() {
    this.ssouid = null;
  }

  /** Returns true if field ssouid is set (has been assigned a value) and false otherwise */
  public boolean isSetSsouid() {
    return this.ssouid != null;
  }

  public void setSsouidIsSet(boolean value) {
    if (!value) {
      this.ssouid = null;
    }
  }

  public Vote getVote() {
    return this.vote;
  }

  public Comment setVote(Vote vote) {
    this.vote = vote;
    return this;
  }

  public void unsetVote() {
    this.vote = null;
  }

  /** Returns true if field vote is set (has been assigned a value) and false otherwise */
  public boolean isSetVote() {
    return this.vote != null;
  }

  public void setVoteIsSet(boolean value) {
    if (!value) {
      this.vote = null;
    }
  }

  public String getCmtType() {
    return this.cmtType;
  }

  public Comment setCmtType(String cmtType) {
    this.cmtType = cmtType;
    return this;
  }

  public void unsetCmtType() {
    this.cmtType = null;
  }

  /** Returns true if field cmtType is set (has been assigned a value) and false otherwise */
  public boolean isSetCmtType() {
    return this.cmtType != null;
  }

  public void setCmtTypeIsSet(boolean value) {
    if (!value) {
      this.cmtType = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public Comment setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public int getImgPackSize() {
    return (this.imgPack == null) ? 0 : this.imgPack.size();
  }

  public void putToImgPack(String key, String val) {
    if (this.imgPack == null) {
      this.imgPack = new HashMap<String,String>();
    }
    this.imgPack.put(key, val);
  }

  public Map<String,String> getImgPack() {
    return this.imgPack;
  }

  public Comment setImgPack(Map<String,String> imgPack) {
    this.imgPack = imgPack;
    return this;
  }

  public void unsetImgPack() {
    this.imgPack = null;
  }

  /** Returns true if field imgPack is set (has been assigned a value) and false otherwise */
  public boolean isSetImgPack() {
    return this.imgPack != null;
  }

  public void setImgPackIsSet(boolean value) {
    if (!value) {
      this.imgPack = null;
    }
  }

  public long getHtime() {
    return this.htime;
  }

  public Comment setHtime(long htime) {
    this.htime = htime;
    setHtimeIsSet(true);
    return this;
  }

  public void unsetHtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HTIME_ISSET_ID);
  }

  /** Returns true if field htime is set (has been assigned a value) and false otherwise */
  public boolean isSetHtime() {
    return EncodingUtils.testBit(__isset_bitfield, __HTIME_ISSET_ID);
  }

  public void setHtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((Long)value);
      }
      break;

    case COMMENTID:
      if (value == null) {
        unsetCommentid();
      } else {
        setCommentid((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case VTIME:
      if (value == null) {
        unsetVtime();
      } else {
        setVtime((String)value);
      }
      break;

    case CTIME:
      if (value == null) {
        unsetCtime();
      } else {
        setCtime((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case REPLYNUM:
      if (value == null) {
        unsetReplynum();
      } else {
        setReplynum((Long)value);
      }
      break;

    case SHARE:
      if (value == null) {
        unsetShare();
      } else {
        setShare((String)value);
      }
      break;

    case LIKE:
      if (value == null) {
        unsetLike();
      } else {
        setLike((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Long)value);
      }
      break;

    case XID:
      if (value == null) {
        unsetXid();
      } else {
        setXid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((Map<String,String>)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((CommentSource)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((CommentUser)value);
      }
      break;

    case IS_LIKE:
      if (value == null) {
        unsetIsLike();
      } else {
        setIsLike((String)value);
      }
      break;

    case IS_VOTED:
      if (value == null) {
        unsetIsVoted();
      } else {
        setIsVoted((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case SSOUID:
      if (value == null) {
        unsetSsouid();
      } else {
        setSsouid((String)value);
      }
      break;

    case VOTE:
      if (value == null) {
        unsetVote();
      } else {
        setVote((Vote)value);
      }
      break;

    case CMT_TYPE:
      if (value == null) {
        unsetCmtType();
      } else {
        setCmtType((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case IMG_PACK:
      if (value == null) {
        unsetImgPack();
      } else {
        setImgPack((Map<String,String>)value);
      }
      break;

    case HTIME:
      if (value == null) {
        unsetHtime();
      } else {
        setHtime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return Long.valueOf(get_id());

    case COMMENTID:
      return getCommentid();

    case CONTENT:
      return getContent();

    case VTIME:
      return getVtime();

    case CTIME:
      return getCtime();

    case CITY:
      return getCity();

    case REPLYNUM:
      return Long.valueOf(getReplynum());

    case SHARE:
      return getShare();

    case LIKE:
      return getLike();

    case PID:
      return Long.valueOf(getPid());

    case XID:
      return Long.valueOf(getXid());

    case CID:
      return Integer.valueOf(getCid());

    case TITLE:
      return getTitle();

    case REPLYS:
      return getReplys();

    case SOURCE:
      return getSource();

    case USER:
      return getUser();

    case IS_LIKE:
      return getIsLike();

    case IS_VOTED:
      return getIsVoted();

    case FLAG:
      return getFlag();

    case REPLY:
      return getReply();

    case UID:
      return getUid();

    case SSOUID:
      return getSsouid();

    case VOTE:
      return getVote();

    case CMT_TYPE:
      return getCmtType();

    case IMG:
      return getImg();

    case IMG_PACK:
      return getImgPack();

    case HTIME:
      return Long.valueOf(getHtime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case COMMENTID:
      return isSetCommentid();
    case CONTENT:
      return isSetContent();
    case VTIME:
      return isSetVtime();
    case CTIME:
      return isSetCtime();
    case CITY:
      return isSetCity();
    case REPLYNUM:
      return isSetReplynum();
    case SHARE:
      return isSetShare();
    case LIKE:
      return isSetLike();
    case PID:
      return isSetPid();
    case XID:
      return isSetXid();
    case CID:
      return isSetCid();
    case TITLE:
      return isSetTitle();
    case REPLYS:
      return isSetReplys();
    case SOURCE:
      return isSetSource();
    case USER:
      return isSetUser();
    case IS_LIKE:
      return isSetIsLike();
    case IS_VOTED:
      return isSetIsVoted();
    case FLAG:
      return isSetFlag();
    case REPLY:
      return isSetReply();
    case UID:
      return isSetUid();
    case SSOUID:
      return isSetSsouid();
    case VOTE:
      return isSetVote();
    case CMT_TYPE:
      return isSetCmtType();
    case IMG:
      return isSetImg();
    case IMG_PACK:
      return isSetImgPack();
    case HTIME:
      return isSetHtime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Comment)
      return this.equals((Comment)that);
    return false;
  }

  public boolean equals(Comment that) {
    if (that == null)
      return false;

    boolean this_present__id = true;
    boolean that_present__id = true;
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (this._id != that._id)
        return false;
    }

    boolean this_present_commentid = true && this.isSetCommentid();
    boolean that_present_commentid = true && that.isSetCommentid();
    if (this_present_commentid || that_present_commentid) {
      if (!(this_present_commentid && that_present_commentid))
        return false;
      if (!this.commentid.equals(that.commentid))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_vtime = true && this.isSetVtime();
    boolean that_present_vtime = true && that.isSetVtime();
    if (this_present_vtime || that_present_vtime) {
      if (!(this_present_vtime && that_present_vtime))
        return false;
      if (!this.vtime.equals(that.vtime))
        return false;
    }

    boolean this_present_ctime = true && this.isSetCtime();
    boolean that_present_ctime = true && that.isSetCtime();
    if (this_present_ctime || that_present_ctime) {
      if (!(this_present_ctime && that_present_ctime))
        return false;
      if (!this.ctime.equals(that.ctime))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_replynum = true;
    boolean that_present_replynum = true;
    if (this_present_replynum || that_present_replynum) {
      if (!(this_present_replynum && that_present_replynum))
        return false;
      if (this.replynum != that.replynum)
        return false;
    }

    boolean this_present_share = true && this.isSetShare();
    boolean that_present_share = true && that.isSetShare();
    if (this_present_share || that_present_share) {
      if (!(this_present_share && that_present_share))
        return false;
      if (!this.share.equals(that.share))
        return false;
    }

    boolean this_present_like = true && this.isSetLike();
    boolean that_present_like = true && that.isSetLike();
    if (this_present_like || that_present_like) {
      if (!(this_present_like && that_present_like))
        return false;
      if (!this.like.equals(that.like))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_xid = true;
    boolean that_present_xid = true;
    if (this_present_xid || that_present_xid) {
      if (!(this_present_xid && that_present_xid))
        return false;
      if (this.xid != that.xid)
        return false;
    }

    boolean this_present_cid = true;
    boolean that_present_cid = true;
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_isLike = true && this.isSetIsLike();
    boolean that_present_isLike = true && that.isSetIsLike();
    if (this_present_isLike || that_present_isLike) {
      if (!(this_present_isLike && that_present_isLike))
        return false;
      if (!this.isLike.equals(that.isLike))
        return false;
    }

    boolean this_present_isVoted = true && this.isSetIsVoted();
    boolean that_present_isVoted = true && that.isSetIsVoted();
    if (this_present_isVoted || that_present_isVoted) {
      if (!(this_present_isVoted && that_present_isVoted))
        return false;
      if (!this.isVoted.equals(that.isVoted))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_ssouid = true && this.isSetSsouid();
    boolean that_present_ssouid = true && that.isSetSsouid();
    if (this_present_ssouid || that_present_ssouid) {
      if (!(this_present_ssouid && that_present_ssouid))
        return false;
      if (!this.ssouid.equals(that.ssouid))
        return false;
    }

    boolean this_present_vote = true && this.isSetVote();
    boolean that_present_vote = true && that.isSetVote();
    if (this_present_vote || that_present_vote) {
      if (!(this_present_vote && that_present_vote))
        return false;
      if (!this.vote.equals(that.vote))
        return false;
    }

    boolean this_present_cmtType = true && this.isSetCmtType();
    boolean that_present_cmtType = true && that.isSetCmtType();
    if (this_present_cmtType || that_present_cmtType) {
      if (!(this_present_cmtType && that_present_cmtType))
        return false;
      if (!this.cmtType.equals(that.cmtType))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_imgPack = true && this.isSetImgPack();
    boolean that_present_imgPack = true && that.isSetImgPack();
    if (this_present_imgPack || that_present_imgPack) {
      if (!(this_present_imgPack && that_present_imgPack))
        return false;
      if (!this.imgPack.equals(that.imgPack))
        return false;
    }

    boolean this_present_htime = true;
    boolean that_present_htime = true;
    if (this_present_htime || that_present_htime) {
      if (!(this_present_htime && that_present_htime))
        return false;
      if (this.htime != that.htime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Comment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentid()).compareTo(other.isSetCommentid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentid, other.commentid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVtime()).compareTo(other.isSetVtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vtime, other.vtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtime()).compareTo(other.isSetCtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctime, other.ctime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplynum()).compareTo(other.isSetReplynum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplynum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replynum, other.replynum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShare()).compareTo(other.isSetShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share, other.share);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLike()).compareTo(other.isSetLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.like, other.like);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXid()).compareTo(other.isSetXid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xid, other.xid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLike()).compareTo(other.isSetIsLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLike, other.isLike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVoted()).compareTo(other.isSetIsVoted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVoted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVoted, other.isVoted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSsouid()).compareTo(other.isSetSsouid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsouid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssouid, other.ssouid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVote()).compareTo(other.isSetVote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vote, other.vote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmtType()).compareTo(other.isSetCmtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmtType, other.cmtType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgPack()).compareTo(other.isSetImgPack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgPack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgPack, other.imgPack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtime()).compareTo(other.isSetHtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htime, other.htime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Comment(");
    boolean first = true;

    sb.append("_id:");
    sb.append(this._id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentid:");
    if (this.commentid == null) {
      sb.append("null");
    } else {
      sb.append(this.commentid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vtime:");
    if (this.vtime == null) {
      sb.append("null");
    } else {
      sb.append(this.vtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctime:");
    if (this.ctime == null) {
      sb.append("null");
    } else {
      sb.append(this.ctime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replynum:");
    sb.append(this.replynum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("share:");
    if (this.share == null) {
      sb.append("null");
    } else {
      sb.append(this.share);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("like:");
    if (this.like == null) {
      sb.append("null");
    } else {
      sb.append(this.like);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xid:");
    sb.append(this.xid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cid:");
    sb.append(this.cid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replys:");
    if (this.replys == null) {
      sb.append("null");
    } else {
      sb.append(this.replys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLike:");
    if (this.isLike == null) {
      sb.append("null");
    } else {
      sb.append(this.isLike);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVoted:");
    if (this.isVoted == null) {
      sb.append("null");
    } else {
      sb.append(this.isVoted);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    if (this.flag == null) {
      sb.append("null");
    } else {
      sb.append(this.flag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reply:");
    if (this.reply == null) {
      sb.append("null");
    } else {
      sb.append(this.reply);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ssouid:");
    if (this.ssouid == null) {
      sb.append("null");
    } else {
      sb.append(this.ssouid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vote:");
    if (this.vote == null) {
      sb.append("null");
    } else {
      sb.append(this.vote);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmtType:");
    if (this.cmtType == null) {
      sb.append("null");
    } else {
      sb.append(this.cmtType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("img:");
    if (this.img == null) {
      sb.append("null");
    } else {
      sb.append(this.img);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgPack:");
    if (this.imgPack == null) {
      sb.append("null");
    } else {
      sb.append(this.imgPack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("htime:");
    sb.append(this.htime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (source != null) {
      source.validate();
    }
    if (user != null) {
      user.validate();
    }
    if (vote != null) {
      vote.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentStandardSchemeFactory implements SchemeFactory {
    public CommentStandardScheme getScheme() {
      return new CommentStandardScheme();
    }
  }

  private static class CommentStandardScheme extends StandardScheme<Comment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Comment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._id = iprot.readI64();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMENTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentid = iprot.readString();
              struct.setCommentidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vtime = iprot.readString();
              struct.setVtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ctime = iprot.readString();
              struct.setCtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPLYNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.replynum = iprot.readI64();
              struct.setReplynumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.share = iprot.readString();
              struct.setShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.like = iprot.readString();
              struct.setLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pid = iprot.readI64();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // XID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xid = iprot.readI64();
              struct.setXidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.replys = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  String _val13;
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.replys.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.source = new CommentSource();
              struct.source.read(iprot);
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new CommentUser();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isLike = iprot.readString();
              struct.setIsLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_VOTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isVoted = iprot.readString();
              struct.setIsVotedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply = iprot.readString();
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SSOUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ssouid = iprot.readString();
              struct.setSsouidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // VOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vote = new Vote();
              struct.vote.read(iprot);
              struct.setVoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmtType = iprot.readString();
              struct.setCmtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IMG_PACK
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
                struct.imgPack = new HashMap<String,String>(2*_map14.size);
                for (int _i15 = 0; _i15 < _map14.size; ++_i15)
                {
                  String _key16;
                  String _val17;
                  _key16 = iprot.readString();
                  _val17 = iprot.readString();
                  struct.imgPack.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setImgPackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.htime = iprot.readI64();
              struct.setHtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Comment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeI64(struct._id);
      oprot.writeFieldEnd();
      if (struct.commentid != null) {
        oprot.writeFieldBegin(COMMENTID_FIELD_DESC);
        oprot.writeString(struct.commentid);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.vtime != null) {
        oprot.writeFieldBegin(VTIME_FIELD_DESC);
        oprot.writeString(struct.vtime);
        oprot.writeFieldEnd();
      }
      if (struct.ctime != null) {
        oprot.writeFieldBegin(CTIME_FIELD_DESC);
        oprot.writeString(struct.ctime);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLYNUM_FIELD_DESC);
      oprot.writeI64(struct.replynum);
      oprot.writeFieldEnd();
      if (struct.share != null) {
        oprot.writeFieldBegin(SHARE_FIELD_DESC);
        oprot.writeString(struct.share);
        oprot.writeFieldEnd();
      }
      if (struct.like != null) {
        oprot.writeFieldBegin(LIKE_FIELD_DESC);
        oprot.writeString(struct.like);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI64(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XID_FIELD_DESC);
      oprot.writeI64(struct.xid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CID_FIELD_DESC);
      oprot.writeI32(struct.cid);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.replys != null) {
        oprot.writeFieldBegin(REPLYS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.replys.size()));
          for (Map.Entry<String, String> _iter18 : struct.replys.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        struct.source.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isLike != null) {
        oprot.writeFieldBegin(IS_LIKE_FIELD_DESC);
        oprot.writeString(struct.isLike);
        oprot.writeFieldEnd();
      }
      if (struct.isVoted != null) {
        oprot.writeFieldBegin(IS_VOTED_FIELD_DESC);
        oprot.writeString(struct.isVoted);
        oprot.writeFieldEnd();
      }
      if (struct.flag != null) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeString(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.reply != null) {
        oprot.writeFieldBegin(REPLY_FIELD_DESC);
        oprot.writeString(struct.reply);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.ssouid != null) {
        oprot.writeFieldBegin(SSOUID_FIELD_DESC);
        oprot.writeString(struct.ssouid);
        oprot.writeFieldEnd();
      }
      if (struct.vote != null) {
        oprot.writeFieldBegin(VOTE_FIELD_DESC);
        struct.vote.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cmtType != null) {
        oprot.writeFieldBegin(CMT_TYPE_FIELD_DESC);
        oprot.writeString(struct.cmtType);
        oprot.writeFieldEnd();
      }
      if (struct.img != null) {
        oprot.writeFieldBegin(IMG_FIELD_DESC);
        oprot.writeString(struct.img);
        oprot.writeFieldEnd();
      }
      if (struct.imgPack != null) {
        oprot.writeFieldBegin(IMG_PACK_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.imgPack.size()));
          for (Map.Entry<String, String> _iter19 : struct.imgPack.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HTIME_FIELD_DESC);
      oprot.writeI64(struct.htime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentTupleSchemeFactory implements SchemeFactory {
    public CommentTupleScheme getScheme() {
      return new CommentTupleScheme();
    }
  }

  private static class CommentTupleScheme extends TupleScheme<Comment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetCommentid()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetVtime()) {
        optionals.set(3);
      }
      if (struct.isSetCtime()) {
        optionals.set(4);
      }
      if (struct.isSetCity()) {
        optionals.set(5);
      }
      if (struct.isSetReplynum()) {
        optionals.set(6);
      }
      if (struct.isSetShare()) {
        optionals.set(7);
      }
      if (struct.isSetLike()) {
        optionals.set(8);
      }
      if (struct.isSetPid()) {
        optionals.set(9);
      }
      if (struct.isSetXid()) {
        optionals.set(10);
      }
      if (struct.isSetCid()) {
        optionals.set(11);
      }
      if (struct.isSetTitle()) {
        optionals.set(12);
      }
      if (struct.isSetReplys()) {
        optionals.set(13);
      }
      if (struct.isSetSource()) {
        optionals.set(14);
      }
      if (struct.isSetUser()) {
        optionals.set(15);
      }
      if (struct.isSetIsLike()) {
        optionals.set(16);
      }
      if (struct.isSetIsVoted()) {
        optionals.set(17);
      }
      if (struct.isSetFlag()) {
        optionals.set(18);
      }
      if (struct.isSetReply()) {
        optionals.set(19);
      }
      if (struct.isSetUid()) {
        optionals.set(20);
      }
      if (struct.isSetSsouid()) {
        optionals.set(21);
      }
      if (struct.isSetVote()) {
        optionals.set(22);
      }
      if (struct.isSetCmtType()) {
        optionals.set(23);
      }
      if (struct.isSetImg()) {
        optionals.set(24);
      }
      if (struct.isSetImgPack()) {
        optionals.set(25);
      }
      if (struct.isSetHtime()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSet_id()) {
        oprot.writeI64(struct._id);
      }
      if (struct.isSetCommentid()) {
        oprot.writeString(struct.commentid);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetVtime()) {
        oprot.writeString(struct.vtime);
      }
      if (struct.isSetCtime()) {
        oprot.writeString(struct.ctime);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetReplynum()) {
        oprot.writeI64(struct.replynum);
      }
      if (struct.isSetShare()) {
        oprot.writeString(struct.share);
      }
      if (struct.isSetLike()) {
        oprot.writeString(struct.like);
      }
      if (struct.isSetPid()) {
        oprot.writeI64(struct.pid);
      }
      if (struct.isSetXid()) {
        oprot.writeI64(struct.xid);
      }
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Map.Entry<String, String> _iter20 : struct.replys.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
      if (struct.isSetSource()) {
        struct.source.write(oprot);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetIsLike()) {
        oprot.writeString(struct.isLike);
      }
      if (struct.isSetIsVoted()) {
        oprot.writeString(struct.isVoted);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
      if (struct.isSetReply()) {
        oprot.writeString(struct.reply);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetSsouid()) {
        oprot.writeString(struct.ssouid);
      }
      if (struct.isSetVote()) {
        struct.vote.write(oprot);
      }
      if (struct.isSetCmtType()) {
        oprot.writeString(struct.cmtType);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetImgPack()) {
        {
          oprot.writeI32(struct.imgPack.size());
          for (Map.Entry<String, String> _iter21 : struct.imgPack.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeString(_iter21.getValue());
          }
        }
      }
      if (struct.isSetHtime()) {
        oprot.writeI64(struct.htime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct._id = iprot.readI64();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commentid = iprot.readString();
        struct.setCommentidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vtime = iprot.readString();
        struct.setVtimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ctime = iprot.readString();
        struct.setCtimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.replynum = iprot.readI64();
        struct.setReplynumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.share = iprot.readString();
        struct.setShareIsSet(true);
      }
      if (incoming.get(8)) {
        struct.like = iprot.readString();
        struct.setLikeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pid = iprot.readI64();
        struct.setPidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.xid = iprot.readI64();
        struct.setXidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.replys = new HashMap<String,String>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            String _key24;
            String _val25;
            _key24 = iprot.readString();
            _val25 = iprot.readString();
            struct.replys.put(_key24, _val25);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(14)) {
        struct.source = new CommentSource();
        struct.source.read(iprot);
        struct.setSourceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.user = new CommentUser();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isLike = iprot.readString();
        struct.setIsLikeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isVoted = iprot.readString();
        struct.setIsVotedIsSet(true);
      }
      if (incoming.get(18)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reply = iprot.readString();
        struct.setReplyIsSet(true);
      }
      if (incoming.get(20)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ssouid = iprot.readString();
        struct.setSsouidIsSet(true);
      }
      if (incoming.get(22)) {
        struct.vote = new Vote();
        struct.vote.read(iprot);
        struct.setVoteIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cmtType = iprot.readString();
        struct.setCmtTypeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.imgPack = new HashMap<String,String>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28;
            String _val29;
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.imgPack.put(_key28, _val29);
          }
        }
        struct.setImgPackIsSet(true);
      }
      if (incoming.get(26)) {
        struct.htime = iprot.readI64();
        struct.setHtimeIsSet(true);
      }
    }
  }

}

