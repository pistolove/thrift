package com.thirft.service.comment;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommentUser implements org.apache.thrift.TBase<CommentUser, CommentUser._Fields>, java.io.Serializable, Cloneable, Comparable<CommentUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommentUser");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("photo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ISVIP_FIELD_DESC = new org.apache.thrift.protocol.TField("isvip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COOPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperation", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentUserTupleSchemeFactory());
  }

  public String uid; // required
  public String username; // required
  public String photo; // required
  public String isvip; // required
  public Cooperation cooperation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    USERNAME((short)2, "username"),
    PHOTO((short)3, "photo"),
    ISVIP((short)4, "isvip"),
    COOPERATION((short)5, "cooperation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PHOTO
          return PHOTO;
        case 4: // ISVIP
          return ISVIP;
        case 5: // COOPERATION
          return COOPERATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO, new org.apache.thrift.meta_data.FieldMetaData("photo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISVIP, new org.apache.thrift.meta_data.FieldMetaData("isvip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOPERATION, new org.apache.thrift.meta_data.FieldMetaData("cooperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cooperation.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommentUser.class, metaDataMap);
  }

  public CommentUser() {
  }

  public CommentUser(
    String uid,
    String username,
    String photo,
    String isvip,
    Cooperation cooperation)
  {
    this();
    this.uid = uid;
    this.username = username;
    this.photo = photo;
    this.isvip = isvip;
    this.cooperation = cooperation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommentUser(CommentUser other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPhoto()) {
      this.photo = other.photo;
    }
    if (other.isSetIsvip()) {
      this.isvip = other.isvip;
    }
    if (other.isSetCooperation()) {
      this.cooperation = new Cooperation(other.cooperation);
    }
  }

  public CommentUser deepCopy() {
    return new CommentUser(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.username = null;
    this.photo = null;
    this.isvip = null;
    this.cooperation = null;
  }

  public String getUid() {
    return this.uid;
  }

  public CommentUser setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public CommentUser setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getPhoto() {
    return this.photo;
  }

  public CommentUser setPhoto(String photo) {
    this.photo = photo;
    return this;
  }

  public void unsetPhoto() {
    this.photo = null;
  }

  /** Returns true if field photo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto() {
    return this.photo != null;
  }

  public void setPhotoIsSet(boolean value) {
    if (!value) {
      this.photo = null;
    }
  }

  public String getIsvip() {
    return this.isvip;
  }

  public CommentUser setIsvip(String isvip) {
    this.isvip = isvip;
    return this;
  }

  public void unsetIsvip() {
    this.isvip = null;
  }

  /** Returns true if field isvip is set (has been assigned a value) and false otherwise */
  public boolean isSetIsvip() {
    return this.isvip != null;
  }

  public void setIsvipIsSet(boolean value) {
    if (!value) {
      this.isvip = null;
    }
  }

  public Cooperation getCooperation() {
    return this.cooperation;
  }

  public CommentUser setCooperation(Cooperation cooperation) {
    this.cooperation = cooperation;
    return this;
  }

  public void unsetCooperation() {
    this.cooperation = null;
  }

  /** Returns true if field cooperation is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperation() {
    return this.cooperation != null;
  }

  public void setCooperationIsSet(boolean value) {
    if (!value) {
      this.cooperation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PHOTO:
      if (value == null) {
        unsetPhoto();
      } else {
        setPhoto((String)value);
      }
      break;

    case ISVIP:
      if (value == null) {
        unsetIsvip();
      } else {
        setIsvip((String)value);
      }
      break;

    case COOPERATION:
      if (value == null) {
        unsetCooperation();
      } else {
        setCooperation((Cooperation)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case USERNAME:
      return getUsername();

    case PHOTO:
      return getPhoto();

    case ISVIP:
      return getIsvip();

    case COOPERATION:
      return getCooperation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case USERNAME:
      return isSetUsername();
    case PHOTO:
      return isSetPhoto();
    case ISVIP:
      return isSetIsvip();
    case COOPERATION:
      return isSetCooperation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommentUser)
      return this.equals((CommentUser)that);
    return false;
  }

  public boolean equals(CommentUser that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_photo = true && this.isSetPhoto();
    boolean that_present_photo = true && that.isSetPhoto();
    if (this_present_photo || that_present_photo) {
      if (!(this_present_photo && that_present_photo))
        return false;
      if (!this.photo.equals(that.photo))
        return false;
    }

    boolean this_present_isvip = true && this.isSetIsvip();
    boolean that_present_isvip = true && that.isSetIsvip();
    if (this_present_isvip || that_present_isvip) {
      if (!(this_present_isvip && that_present_isvip))
        return false;
      if (!this.isvip.equals(that.isvip))
        return false;
    }

    boolean this_present_cooperation = true && this.isSetCooperation();
    boolean that_present_cooperation = true && that.isSetCooperation();
    if (this_present_cooperation || that_present_cooperation) {
      if (!(this_present_cooperation && that_present_cooperation))
        return false;
      if (!this.cooperation.equals(that.cooperation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommentUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoto()).compareTo(other.isSetPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo, other.photo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsvip()).compareTo(other.isSetIsvip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsvip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isvip, other.isvip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperation()).compareTo(other.isSetCooperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperation, other.cooperation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommentUser(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photo:");
    if (this.photo == null) {
      sb.append("null");
    } else {
      sb.append(this.photo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isvip:");
    if (this.isvip == null) {
      sb.append("null");
    } else {
      sb.append(this.isvip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperation:");
    if (this.cooperation == null) {
      sb.append("null");
    } else {
      sb.append(this.cooperation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cooperation != null) {
      cooperation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentUserStandardSchemeFactory implements SchemeFactory {
    public CommentUserStandardScheme getScheme() {
      return new CommentUserStandardScheme();
    }
  }

  private static class CommentUserStandardScheme extends StandardScheme<CommentUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommentUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo = iprot.readString();
              struct.setPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ISVIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isvip = iprot.readString();
              struct.setIsvipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COOPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cooperation = new Cooperation();
              struct.cooperation.read(iprot);
              struct.setCooperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommentUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.photo != null) {
        oprot.writeFieldBegin(PHOTO_FIELD_DESC);
        oprot.writeString(struct.photo);
        oprot.writeFieldEnd();
      }
      if (struct.isvip != null) {
        oprot.writeFieldBegin(ISVIP_FIELD_DESC);
        oprot.writeString(struct.isvip);
        oprot.writeFieldEnd();
      }
      if (struct.cooperation != null) {
        oprot.writeFieldBegin(COOPERATION_FIELD_DESC);
        struct.cooperation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentUserTupleSchemeFactory implements SchemeFactory {
    public CommentUserTupleScheme getScheme() {
      return new CommentUserTupleScheme();
    }
  }

  private static class CommentUserTupleScheme extends TupleScheme<CommentUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommentUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPhoto()) {
        optionals.set(2);
      }
      if (struct.isSetIsvip()) {
        optionals.set(3);
      }
      if (struct.isSetCooperation()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPhoto()) {
        oprot.writeString(struct.photo);
      }
      if (struct.isSetIsvip()) {
        oprot.writeString(struct.isvip);
      }
      if (struct.isSetCooperation()) {
        struct.cooperation.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommentUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.photo = iprot.readString();
        struct.setPhotoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isvip = iprot.readString();
        struct.setIsvipIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cooperation = new Cooperation();
        struct.cooperation.read(iprot);
        struct.setCooperationIsSet(true);
      }
    }
  }

}

